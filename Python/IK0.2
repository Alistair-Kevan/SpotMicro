from mpl_toolkits import mplot3d
import numpy as np
import math
from math import *
from inputs import get_gamepad
import threading
import matplotlib.pyplot as plt
#import serial

#ser = serial.Serial('COM4', 9600)


def setupView(limit):
    ax = plt.axes(projection="3d")
    ax.set_xlim(-limit, limit)
    ax.set_ylim(-limit, limit)
    ax.set_zlim(-limit, limit)
    ax.set_xlabel("X")
    ax.set_ylabel("Z")
    ax.set_zlabel("Y")
    return ax

#%matplotlib notebook LEG INVERSE KINEMATICS:

setupView(110).view_init(elev=20., azim=135)
omega =  pi/4
phi =0
psi = 0

xm = 0
ym = 0
zm = 0

l1=25
l2=20
l3=80
l4=80

L = 120
W = 90

Lp=np.array([[100,-100,100,1],[100,-100,-100,1],[-100,-100,100,1],[-100,-100,-100,1]])

sHp=np.sin(pi/2)
cHp=np.cos(pi/2)

Lo=np.array([0,0,0,1])

def bodyIK(omega,phi,psi,xm,ym,zm):
    Rx = np.array([[1,0,0,0],
                   [0,np.cos(omega),-np.sin(omega),0],
                   [0,np.sin(omega),np.cos(omega),0],[0,0,0,1]])
    Ry = np.array([[np.cos(phi),0,np.sin(phi),0],
                   [0,1,0,0],
                   [-np.sin(phi),0,np.cos(phi),0],[0,0,0,1]])
    Rz = np.array([[np.cos(psi),-np.sin(psi),0,0],
                   [np.sin(psi),np.cos(psi),0,0],[0,0,1,0],[0,0,0,1]])
    Rxyz=Rx@Ry@Rz

    T = np.array([[0,0,0,xm],[0,0,0,ym],[0,0,0,zm],[0,0,0,0]])
    Tm = T+Rxyz

    return([Tm @ np.array([[cHp,0,sHp,L/2],[0,1,0,0],[-sHp,0,cHp,W/2],[0,0,0,1]]),
           Tm @ np.array([[cHp,0,sHp,L/2],[0,1,0,0],[-sHp,0,cHp,-W/2],[0,0,0,1]]),
           Tm @ np.array([[cHp,0,sHp,-L/2],[0,1,0,0],[-sHp,0,cHp,W/2],[0,0,0,1]]),
           Tm @ np.array([[cHp,0,sHp,-L/2],[0,1,0,0],[-sHp,0,cHp,-W/2],[0,0,0,1]])
           ])

def legIK(point):
    (x,y,z)=(point[0],point[1],point[2])
    F=sqrt(x**2+y**2-l1**2)
    G=F-l2  
    H=sqrt(G**2+z**2)
    theta1=-atan2(y,x)-atan2(F,-l1)

    D=(H**2-l3**2-l4**2)/(2*l3*l4)
    theta3=acos(D) 

    theta2=atan2(z,G)-atan2(l4*sin(theta3),l3+l4*cos(theta3))
    print(theta1, theta2, theta3)
    angles = legIK(point)
#THIS IS CURRENTLY WRONG NEED TO TAKE ANGLES AFTER GENERATING OTHER LEGS.
# Convert angles from radians to degrees
  #  angles_deg = [math.degrees(angle) for angle in angles]

# Ensure the angles are within the range 0-180
   # angles_deg = [max(min(180, angle), 0) for angle in angles_deg]

# Convert angles to CSV format
  #  angles_csv = ','.join(map(str, angles_deg))

# Write to serial port
  #  print(angles_csv())

    return(theta1,theta2,theta3)

def calcLegPoints(angles):
    (theta1,theta2,theta3)=angles
    theta23=theta2+theta3

    T0=Lo
    T1=T0+np.array([-l1*cos(theta1),l1*sin(theta1),0,0])
    T2=T1+np.array([-l2*sin(theta1),-l2*cos(theta1),0,0])
    T3=T2+np.array([-l3*sin(theta1)*cos(theta2),-l3*cos(theta1)*cos(theta2),l3*sin(theta2),0])
    T4=T3+np.array([-l4*sin(theta1)*cos(theta23),-l4*cos(theta1)*cos(theta23),l4*sin(theta23),0])

    return np.array([T0,T1,T2,T3,T4])

def drawLegPoints(p):
    plt.plot([x[0] for x in p],[x[2] for x in p],[x[1] for x in p], 'k-', lw=3)
    plt.plot([p[0][0]],[p[0][2]],[p[0][1]],'bo',lw=2)
    plt.plot([p[4][0]],[p[4][2]],[p[4][1]],'ro',lw=2)    

def drawLegPair(Tl,Tr,Ll,Lr):
    Ix=np.array([[-1,0,0,0],[0,1,0,0],[0,0,1,0],[0,0,0,1]])
    drawLegPoints([Tl@x for x in calcLegPoints(legIK(np.linalg.inv(Tl)@Ll))])
    drawLegPoints([Tr@Ix@x for x in calcLegPoints(legIK(Ix@np.linalg.inv(Tr)@Lr))])
    
# Function to calculate joint angles
def calculate_joint_angles(transformation_matrices, Lp):
    # Initialize an empty list to store the joint angles
    joint_angles = []

    # Iterate over the transformation matrices
    for i, T in enumerate(transformation_matrices, start=1):
        # Calculate the target point for the current leg
        point = np.linalg.inv(T) @ Lp[i-1]
    
        # Calculate the joint angles for the current leg
        angles = legIK(point)
    
        # Append the joint angles to the list
        joint_angles.append(angles)
    
        # Print the joint angles
        print(f"Joint angles for leg {i}: {angles}")
    
    return joint_angles
    
def drawRobot(Lp,angles,center):
    (omega,phi,psi)=angles
    (xm,ym,zm)=center

    FP=[0,0,0,1]
    (Tlf,Trf,Tlb,Trb)= bodyIK(omega,phi,psi,xm,ym,zm)
    CP=[x@FP for x in [Tlf,Trf,Tlb,Trb]]

    CPs=[CP[x] for x in [0,1,3,2,0]]
    plt.plot([x[0] for x in CPs],[x[2] for x in CPs],[x[1] for x in CPs], 'bo-', lw=2)

    drawLegPair(Tlf,Trf,Lp[0],Lp[1])
    drawLegPair(Tlb,Trb,Lp[2],Lp[3])
    
    # Assuming the transformation matrices for each leg are stored in a list
    transformation_matrices = [Tlf, Trf, Tlb, Trb]

# Initialize an empty list to store the joint angles
    joint_angles = []

# Iterate over the transformation matrices
    for i, T in enumerate(transformation_matrices, start=1):
    # Calculate the target point for the current leg
        point = np.linalg.inv(T) @ Lp[i-1]
    
    # Calculate the joint angles for the current leg
        angles = legIK(point)
    
    # Append the joint angles to the list
        joint_angles.append(angles)
    
    # Print the joint angles
        print(f"Joint angles for leg {i}: {angles}")

# If you want to print all 12 angles together
    all_angles = [angle for angles in joint_angles for angle in angles]
    print(f"All joint angles: {all_angles}")

 ##TO DO: modify serial write function and angles_deg function to output the 12 serperate resultant thetas.   
    
    
##Define body planar positioning parameters, derived from controller inputs
##This side of the code seems to work.

class XboxController(object):
    MAX_TRIG_VAL = math.pow(2, 8)
    MAX_JOY_VAL = math.pow(2, 15)

    def __init__(self):
        self.LeftJoystickY = 0
        self.LeftJoystickX = 0
        self.RightJoystickY = 0
        self.RightJoystickX = 0
        self.LeftDPad = 0
        self.RightDPad = 0
        self.UpDPad = 0
        self.DownDPad = 0
        self._monitor_thread = threading.Thread(target=self._monitor_controller, args=())
        self._monitor_thread.daemon = True
        self._monitor_thread.start()

    def _monitor_controller(self):
        while True:
            events = get_gamepad()
            for event in events:
                if event.code == 'ABS_Y':
                    self.LeftJoystickY = event.state / XboxController.MAX_JOY_VAL
                elif event.code == 'ABS_X':
                    self.LeftJoystickX = event.state / XboxController.MAX_JOY_VAL
                elif event.code == 'ABS_RY':
                    self.RightJoystickY = event.state / XboxController.MAX_JOY_VAL
                elif event.code == 'ABS_RX':
                    self.RightJoystickX = event.state / XboxController.MAX_JOY_VAL
                elif event.code == 'BTN_TRIGGER_HAPPY1':
                    self.LeftDPad = event.state
                elif event.code == 'BTN_TRIGGER_HAPPY2':
                    self.RightDPad = event.state
                elif event.code == 'BTN_TRIGGER_HAPPY3':
                    self.UpDPad = event.state
                elif event.code == 'BTN_TRIGGER_HAPPY4':
                    self.DownDPad = event.state

controller = XboxController()

while True:
    A = controller.LeftJoystickY
    B = controller.LeftJoystickX
    C = controller.RightJoystickY
    X = controller.RightJoystickX
    Y = controller.LeftDPad
    Z = controller.RightDPad
    
    drawRobot(Lp,(A,B,C),(X,Y,Z))
    plt.show()

# Create a Thread object and target it to your function
thread = threading.Thread(target=cont_input)

# Start the thread
thread.start()   

